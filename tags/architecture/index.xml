<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>architecture on Tiago Dall'Oca</title><link>https://tiagodalloca.github.io/tags/architecture/</link><description>Recent content in architecture on Tiago Dall'Oca</description><generator>Hugo -- gohugo.io</generator><managingEditor>tdalloca@gmail.com (Tiago Dall'Oca)</managingEditor><webMaster>tdalloca@gmail.com (Tiago Dall'Oca)</webMaster><lastBuildDate>Sat, 17 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://tiagodalloca.github.io/tags/architecture/index.xml" rel="self" type="application/rss+xml"/><item><title>An Event-Driven REST Coffee Machine API with Clojure</title><link>https://tiagodalloca.github.io/posts/2021-04-27-event-driven-coffee-machine/</link><pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate><author>tdalloca@gmail.com (Tiago Dall'Oca)</author><guid>https://tiagodalloca.github.io/posts/2021-04-27-event-driven-coffee-machine/</guid><description>Today I&amp;rsquo;m going to show you how to build a REST API for a coffee machine using:
Event-Driven communication between components Clojure, a language for writing correct and robust software with less ceremony Integrant for application state management reitit for routing http requests You can find the source code for this project in my github.
Introduction Skip introduction
In recent years developing software for an enterprise software, I had the experience to work with the antonym of a clean architecture.</description></item></channel></rss>